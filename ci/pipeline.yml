#@ load("@ytt:data", "data")

#@ def pipeline_image():
#@   return data.values.docker_registry + "/galoy-infra-pipeline"
#@ end

#@ def task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ pipeline_image()
#@ end

#@ def testflight_task_params():
GOOGLE_CREDENTIALS: #@ data.values.testflight_gcp_creds
OS_LOGIN_SSH_PRIVATE_KEY: #@ data.values.testflight_bastion_ssh_private_key
OS_LOGIN_SSH_PUB_KEY: #@ data.values.testflight_bastion_ssh_pub_key
TESTFLIGHT_ADMINS: #@ data.values.testflight_admins
KUBE_HOST: #@ data.values.concourse_tf_kube_host
KUBE_CA_CERT: #@ data.values.concourse_tf_kube_ca_cert
KUBE_TOKEN: #@ data.values.concourse_tf_kube_token
TF_VAR_name_prefix: testflight
TF_VAR_gcp_project: galoy-infra-testflight
TF_VAR_enable_services: false
BRANCH: #@ data.values.git_branch
#@ end


jobs:
- name: build-pipeline-image
  serial: true
  plan:
  - {get: pipeline-image-def, trigger: true}
  - task: build
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: vito/oci-build-task
      inputs:
      - name: pipeline-image-def
      outputs:
      - name: image
      params:
        CONTEXT: pipeline-image-def/ci/image
      run:
        path: build
  - put: pipeline-image
    params:
      image: image/image.tar

- name: testflight-bootstrap
  serial_groups: [testflight]
  plan:
  - put: testflight-lock
    params: { claim: gcp-testflight }
  - in_parallel:
    - { get: modules, trigger: true}
    - { get: repo }
    - { get: pipeline-tasks }
  - task: bootstrap
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/bootstrap.sh

- name: testflight-inception
  serial_groups: [testflight]
  plan:
  - { get: testflight-lock, passed: [testflight-bootstrap] }
  - in_parallel:
    - { get: modules, trigger: true, passed: [testflight-bootstrap]}
    - { get: repo, trigger: true, passed: [testflight-bootstrap] }
    - { get: pipeline-tasks }
  - task: inception
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/inception.sh

- name: testflight-platform
  serial_groups: [testflight]
  plan:
  - { get: testflight-lock, passed: [testflight-inception] }
  - in_parallel:
    - { get: modules, trigger: true, passed: [testflight-inception]}
    - { get: repo, trigger: true, passed: [testflight-inception] }
    - { get: pipeline-tasks }
  - task: platform
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/platform.sh

- name: testflight-cleanup
  serial_groups: [testflight]
  plan:
  - { get: testflight-lock, passed: [testflight-platform] }
  - in_parallel:
    - { get: galoy-deployments }
    - { get: modules, passed: [testflight-platform], trigger: true}
    - { get: repo, trigger: true, passed: [testflight-platform] }
    - { get: pipeline-tasks }
  - task: teardown
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: galoy-deployments
      - name: pipeline-tasks
      - name: repo
      - name: modules
      outputs: 
      - name: repo
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/teardown.sh
  - in_parallel:
    - put: repo
      params:
        repository: repo
        rebase: true
    - put: galoy-deployments
      params:
        repository: galoy-deployments
        rebase: true
    - put: testflight-lock
      params: { release: testflight-lock }

resources:
- name: repo
  type: git
  source:
    ignore_paths: ["ci/*[^md]"]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
- name: modules
  type: git
  source:
    paths: ["modules"]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
- name: pipeline-tasks
  type: git
  source:
    paths: [ci/tasks/*, Makefile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
- name: galoy-deployments
  type: git
  source:
    paths: [gcp/staging/*]
    uri: #@ data.values.deployments_git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: pipeline-image
  type: registry-image
  source:
    tag: latest
    username: #@ data.values.docker_registry_user
    password: #@ data.values.docker_registry_password
    repository: #@ pipeline_image()
- name: pipeline-image-def
  type: git
  source:
    paths: [ci/image/Dockerfile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: testflight-lock
  type: pool
  source:
    uri: git@github.com:GaloyMoney/concourse-locks.git
    branch: main
    pool: infra-testflight
    private_key: #@ data.values.github_private_key
