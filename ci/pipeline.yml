#@ load("@ytt:data", "data")

#@ def pipeline_image():
#@   return data.values.docker_registry + "/galoy-infra-pipeline"
#@ end

#@ def task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ pipeline_image()
#@ end

#@ def testflight_task_params():
GOOGLE_CREDENTIALS: #@ data.values.testflight_gcp_creds
SSH_PRIVATE_KEY: #@ data.values.testflight_ssh_private_key
SSH_PUB_KEY: #@ data.values.testflight_ssh_pub_key
TESTFLIGHT_ADMINS: #@ data.values.testflight_admins
KUBE_HOST: #@ data.values.concourse_tf_kube_host
KUBE_CA_CERT: #@ data.values.concourse_tf_kube_ca_cert
KUBE_TOKEN: #@ data.values.concourse_tf_kube_token
TF_VAR_name_prefix: testflight-b
TF_VAR_gcp_project: galoy-infra-testflight
TF_VAR_enable_services: false
BRANCH: #@ data.values.git_branch
#@ end

groups:
- name: testflight
  jobs:
  - testflight-bootstrap
  - testflight-inception
  - testflight-platform
  - testflight-cleanup
  - bump-repos
- name: staging
  jobs:
  - bump-repos
  - staging-inception
  - staging-platform
  - staging-services
- name: image
  jobs: [ build-pipeline-image ]

jobs:
- name: build-pipeline-image
  serial: true
  plan:
  - {get: pipeline-image-def, trigger: true}
  - task: build
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: vito/oci-build-task
      inputs:
      - name: pipeline-image-def
      outputs:
      - name: image
      params:
        CONTEXT: pipeline-image-def/ci/image
      run:
        path: build
  - put: pipeline-image
    params:
      image: image/image.tar

- name: testflight-bootstrap
  serial_groups: [testflight]
  plan:
  - put: testflight-lock
    params: { claim: gcp-testflight }
  - in_parallel:
    - { get: modules, trigger: true}
    - { get: repo }
    - { get: pipeline-tasks }
  - task: bootstrap
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/bootstrap.sh

- name: testflight-inception
  serial_groups: [testflight]
  plan:
  - { get: testflight-lock, passed: [testflight-bootstrap] }
  - in_parallel:
    - { get: modules, trigger: true, passed: [testflight-bootstrap]}
    - { get: repo, trigger: true, passed: [testflight-bootstrap] }
    - { get: pipeline-tasks }
  - task: inception
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/inception.sh

- name: testflight-platform
  serial_groups: [testflight]
  plan:
  - { get: testflight-lock, passed: [testflight-inception] }
  - in_parallel:
    - { get: modules, trigger: true, passed: [testflight-inception]}
    - { get: repo, trigger: true, passed: [testflight-inception] }
    - { get: pipeline-tasks }
  - task: platform
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/platform.sh

- name: testflight-cleanup
  serial_groups: [testflight]
  plan:
  - { get: testflight-lock, passed: [testflight-platform] }
  - in_parallel:
    - { get: modules, passed: [testflight-platform], trigger: true}
    - { get: repo, trigger: true, passed: [testflight-platform] }
    - { get: pipeline-tasks }
  - task: teardown
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      - name: modules
      outputs: 
      - name: repo
      params: #@ testflight_task_params()
      run:
        path: pipeline-tasks/ci/tasks/teardown.sh
  - put: testflight-lock
    params: { release: testflight-lock }

- name: bump-repos
  plan:
  - in_parallel:
    - { get: galoy-staging }
    - { get: modules, passed: [testflight-cleanup], trigger: true}
    - { get: repo, trigger: true, passed: [testflight-cleanup] }
    - { get: pipeline-tasks }
  - task: bump-repos
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: galoy-staging
      - name: pipeline-tasks
      - name: modules
      - name: repo
      outputs:
      - name: repo
      - name: galoy-staging
      params:
        BRANCH: #@ data.values.git_branch
      run:
        path: pipeline-tasks/ci/tasks/bump-repos.sh
  - in_parallel:
    - put: repo
      params:
        repository: repo
        rebase: true
    - put: galoy-staging
      params:
        repository: galoy-staging
        rebase: true


- name: staging-inception
  serial_groups: [staging]
  plan:
  - put: staging-lock
    params: { claim: gcp-staging }
  - in_parallel:
    - { get: repo, passed: [bump-repos], trigger: true}
    - { get: galoy-staging }
  - put: tf-staging-inception
    params:
      terraform_source: galoy-staging/gcp/staging/inception

- name: staging-platform
  serial_groups: [staging]
  plan:
  - { get: staging-lock, passed: [staging-inception]}
  - in_parallel:
    - { get: repo, passed: [staging-inception], trigger: true}
    - { get: galoy-staging, trigger: true, passed: [staging-inception] }
  - put: tf-staging-platform
    params:
      terraform_source: galoy-staging/gcp/staging/platform

- name: staging-services
  serial_groups: [staging]
  plan:
  - { get: staging-lock, passed: [staging-platform]}
  - in_parallel:
    - { get: repo, passed: [staging-platform], trigger: true}
    - { get: galoy-staging, trigger: true, passed: [staging-platform] }
  - put: tf-staging-services
    tags: ["staging"]
    params:
      terraform_source: galoy-staging/gcp/staging/services
  - in_parallel:
    - put: staging-lock
      params: { release: staging-lock }
    - put: cepler-out
      params: { repository: galoy-staging }

resources:
- name: repo
  type: git
  source:
    ignore_paths: ["ci/*[^md]"]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
- name: modules
  type: git
  source:
    paths: ["modules"]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
- name: pipeline-tasks
  type: git
  source:
    paths: [ci/tasks/*, Makefile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
- name: galoy-staging
  type: git
  source:
    paths:
    - gcp/staging/*
    - modules/gcp/platform
    - module/gcp/bootstrap
    - module/gcp/inception
    - module/services/base
    - cepler.yml
    uri: #@ data.values.deployments_git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: pipeline-image
  type: registry-image
  source:
    tag: latest
    username: #@ data.values.docker_registry_user
    password: #@ data.values.docker_registry_password
    repository: #@ pipeline_image()
- name: pipeline-image-def
  type: git
  source:
    paths: [ci/image/Dockerfile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: testflight-lock
  type: pool
  source:
    uri: git@github.com:GaloyMoney/concourse-locks.git
    branch: main
    pool: infra-testflight
    private_key: #@ data.values.github_private_key

- name: staging-lock
  type: pool
  source:
    uri: git@github.com:GaloyMoney/concourse-locks.git
    branch: main
    pool: staging
    private_key: #@ data.values.github_private_key

- name: tf-staging-inception
  type: terraform
  source:
    env_name: default
    backend_type: gcs
    backend_config:
      bucket: #@ data.values.staging_state_bucket
      prefix: galoy-staging/inception
      credentials: #@ data.values.staging_inception_creds
    env:
      GOOGLE_CREDENTIALS: #@ data.values.staging_inception_creds

- name: tf-staging-platform
  type: terraform
  source:
    env_name: default
    backend_type: gcs
    backend_config:
      bucket: #@ data.values.staging_state_bucket
      prefix: galoy-staging/platform
      credentials: #@ data.values.staging_inception_creds
    env:
      GOOGLE_CREDENTIALS: #@ data.values.staging_inception_creds

- name: tf-staging-services
  type: terraform
  source:
    env_name: default
    backend_type: gcs
    backend_config:
      bucket: #@ data.values.staging_state_bucket
      prefix: galoy-staging/services/base
      credentials: #@ data.values.staging_inception_creds
    env:
      GOOGLE_CREDENTIALS: #@ data.values.staging_inception_creds

- name: cepler-out
  type: cepler-out
  source:
    uri: #@ data.values.deployments_git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
    environment: gcp-staging-infra
    config: cepler.yml

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest

- name: cepler-out
  type: registry-image
  source:
    repository: cepler/cepler-concourse-resource
    tag: 0.6.5
